// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: alerts.sql

package db

import (
	"context"
)

const createAlert = `-- name: CreateAlert :one
INSERT INTO alerts (asset_id, severity)
VALUES ($1, $2)
RETURNING id, asset_id, severity, created_at
`

type CreateAlertParams struct {
	AssetID  int32  `json:"asset_id"`
	Severity string `json:"severity"`
}

func (q *Queries) CreateAlert(ctx context.Context, arg CreateAlertParams) (Alert, error) {
	row := q.db.QueryRowContext(ctx, createAlert, arg.AssetID, arg.Severity)
	var i Alert
	err := row.Scan(
		&i.ID,
		&i.AssetID,
		&i.Severity,
		&i.CreatedAt,
	)
	return i, err
}

const getAlerts = `-- name: GetAlerts :many
SELECT id, asset_id, severity, created_at FROM alerts
WHERE 
    asset_id = COALESCE($1, asset_id) AND
    severity = COALESCE($2, severity)
ORDER BY id DESC
`

type GetAlertsParams struct {
	AssetID  int32  `json:"asset_id"`
	Severity string `json:"severity"`
}

func (q *Queries) GetAlerts(ctx context.Context, arg GetAlertsParams) ([]Alert, error) {
	rows, err := q.db.QueryContext(ctx, getAlerts, arg.AssetID, arg.Severity)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Alert{}
	for rows.Next() {
		var i Alert
		if err := rows.Scan(
			&i.ID,
			&i.AssetID,
			&i.Severity,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
